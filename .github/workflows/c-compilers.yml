# Name of the workflow is also displayed as a SVG badge
name: C Compilers

on: [push, pull_request]

jobs:
  # Test various C compilers
  #
  lz4-c-compilers:
    name: $CC=${{ matrix.cc }}, ${{ matrix.os }}, c-compilers.yml
    strategy:
      fail-fast: false  # 'false' means Don't stop matrix workflows even if some matrix failed.
      matrix:
        include: [
          # You can access the following values via ${{ matrix.??? }}
          #   name : Label name.
          #   pkgs : apt-get package names.  You can include multiple package names which are delimited by space.
          #   cc   : C compiler executable.
          #   cxx  : C++ compiler executable for `make ctocpptest`.
          #   stdc90 : Set 'true' if compiler supports C90 standard.
          #   stdc11 : Set 'true' if compiler supports C11 standard.
          #   m32  : Set 'true' if compiler supports x32.
          #   os   : GitHub Actions YAML workflow label.  See https://github.com/actions/virtual-environments#available-environments

          # Default C compilers
          #  We always use 'ubuntu-latest' for default C/C++ compilers.
          { pkgs: '',                                                   cc: cc,        cxx: c++,         stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-latest, },
          { pkgs: '',                                                   cc: gcc,       cxx: g++,         stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-latest, },
          { pkgs: 'lib32gcc-11-dev libx32gcc-11-dev',                   cc: clang,     cxx: clang++,     stdc11: 'true',  stdc90: 'true',  x32: 'may-fail', os: ubuntu-latest, },  # MOREFLAGS='-mx32 -Wl,--verbose' make V=1 -C tests clean test, lz4: ../lib/lz4hc.c:282: int LZ4HC_InsertAndGetWiderMatch(...), Assertion `matchPtr >= lowPrefixPtr' failed.

          # gcc
          { pkgs: 'gcc-11 lib32gcc-11-dev libx32gcc-11-dev',            cc: gcc-11,    cxx: g++-11,      stdc11: 'true',  stdc90: 'true',  x32: 'may-fail', os: ubuntu-20.04,  },  # LDFLAGS='-Wl,--verbose' MOREFLAGS='-mx32' make V=1 -C tests clean test, lz4: ../lib/lz4hc.c:148: LZ4HC_countBack: Assertion `(size_t)(match - mMin) < (1U<<31)' failed.
####          { pkgs: 'gcc-10 lib32gcc-10-dev libx32gcc-10-dev',            cc: gcc-10,    cxx: g++-10,      stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-20.04,  },
####          { pkgs: 'gcc-9 lib32gcc-9-dev libx32gcc-9-dev',               cc: gcc-9,     cxx: g++-9,       stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-20.04,  },
####          { pkgs: 'gcc-8 g++-8 lib32gcc-8-dev libx32gcc-8-dev',         cc: gcc-8,     cxx: g++-8,       stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-20.04,  },
####          { pkgs: 'gcc-7 g++-7 lib32gcc-7-dev libx32gcc-7-dev',         cc: gcc-7,     cxx: g++-7,       stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-20.04,  },
####          { pkgs: 'gcc-6 g++-6 lib32gcc-6-dev libx32gcc-6-dev',         cc: gcc-6,     cxx: g++-6,       stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-18.04,  },
####          { pkgs: 'gcc-5 g++-5 lib32gcc-5-dev libx32gcc-5-dev',         cc: gcc-5,     cxx: g++-5,       stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-18.04,  },
####          { pkgs: 'gcc-4.8 g++-4.8 lib32gcc-4.8-dev libx32gcc-4.8-dev', cc: gcc-4.8,   cxx: g++-4.8,     stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-18.04,  },
####          { pkgs: 'gcc-4.7 g++-4.7 lib32gcc-4.7-dev',                   cc: gcc-4.7,   cxx: g++-4.7,     stdc11: 'true',  stdc90: 'true',  x32: 'false',    os: ubuntu-16.04,  },
####          { pkgs: 'gcc-4.6 g++-4.6 gcc-4.6-multilib',                   cc: gcc-4.6,   cxx: g++-4.6,     stdc11: 'false', stdc90: 'true',  x32: 'false',    os: ubuntu-16.04,  },
####          #{pkgs: 'gcc-4.5 g++-4.5',                                    cc: gcc-4.5,   cxx: g++-4.5,     stdc11: 'false', stdc90: 'true',  x32: 'false',    os: ubuntu-16.04,  },  # Failed to install gcc-4.5.  Dependent package is not installable.
####          { pkgs: 'gcc-4.4 g++-4.4 gcc-4.4-multilib',                   cc: gcc-4.4,   cxx: g++-4.4,     stdc11: 'false', stdc90: 'false', x32: 'false',    os: ubuntu-16.04,  },  # gcc-4.4 doesn't support C90 https://gcc.gnu.org/onlinedocs/gcc-4.4.7/gcc/C-Dialect-Options.html#C-Dialect-Options

          # clang
          { pkgs: 'clang-12  lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-12,  cxx: clang++-12,  stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-20.04,  },
          { pkgs: 'clang-11  lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-11,  cxx: clang++-11,  stdc11: 'true',  stdc90: 'true',  x32: 'true',     os: ubuntu-20.04,  },
          { pkgs: 'clang-10  lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-10,  cxx: clang++-10,  stdc11: 'true',  stdc90: 'true',  x32: 'may-fail', os: ubuntu-20.04,  },
          { pkgs: 'clang-9   lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-9,   cxx: clang++-9,   stdc11: 'true',  stdc90: 'true',  x32: 'may-fail',     os: ubuntu-20.04,  },
          { pkgs: 'clang-8   lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-8,   cxx: clang++-8,   stdc11: 'true',  stdc90: 'true',  x32: 'may-fail',     os: ubuntu-20.04,  },
          { pkgs: 'clang-7   lib32gcc-7-dev  libx32gcc-7-dev',          cc: clang-7,   cxx: clang++-7,   stdc11: 'true',  stdc90: 'true',  x32: 'may-fail',     os: ubuntu-20.04,  },
          { pkgs: 'clang-6.0 lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-6.0, cxx: clang++-6.0, stdc11: 'true',  stdc90: 'true',  x32: 'may-fail', os: ubuntu-20.04,  }, # MOREFLAGS='-mx32 -Wl,--verbose' make V=1 -C tests clean test, lz4: ../lib/lz4hc.c:282: int LZ4HC_InsertAndGetWiderMatch(...), Assertion `matchPtr >= lowPrefixPtr' failed.
          { pkgs: 'clang-5.0 lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-5.0, cxx: clang++-5.0, stdc11: 'true',  stdc90: 'true',  x32: 'may-fail', os: ubuntu-18.04,  }, # MOREFLAGS='-mx32 -Wl,--verbose' make V=1 -C tests clean test, lz4: ../lib/lz4hc.c:282: int LZ4HC_InsertAndGetWiderMatch(...), Assertion `matchPtr >= lowPrefixPtr' failed.
          { pkgs: 'clang-4.0 lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-4.0, cxx: clang++-4.0, stdc11: 'true',  stdc90: 'true',  x32: 'may-fail', os: ubuntu-18.04,  }, # MOREFLAGS='-mx32 -Wl,--verbose' make V=1 -C tests clean test, lz4: ../lib/lz4hc.c:282: int LZ4HC_InsertAndGetWiderMatch(...), Assertion `matchPtr >= lowPrefixPtr' failed.
          { pkgs: 'clang-3.9 lib32gcc-11-dev libx32gcc-11-dev',         cc: clang-3.9, cxx: clang++-3.9, stdc11: 'true',  stdc90: 'true',  x32: 'may-fail', os: ubuntu-18.04,  }, # MOREFLAGS='-mx32 -Wl,--verbose' make V=1 -C tests clean test, ../programs/lz4 -bi0 -> make: *** [test-lz4-testmode] Segmentation fault (core dumped
          { pkgs: 'clang-3.8',                                          cc: clang-3.8, cxx: clang++-3.8, stdc11: 'true',  stdc90: 'true',  x32: 'may-fail', os: ubuntu-16.04,  }, # MOREFLAGS='-mx32 -Wl,--verbose' make V=1 -C tests clean test, lz4: ../lib/lz4hc.c:282: int LZ4HC_InsertAndGetWiderMatch(...), Assertion `matchPtr >= lowPrefixPtr' failed.
          { pkgs: 'clang-3.7',                                          cc: clang-3.7, cxx: clang++-3.7, stdc11: 'true',  stdc90: 'true',  x32: 'false',    os: ubuntu-16.04,  }, # clang-3.7 compiler clashes for x32, LDFLAGS='-Wl,--verbose' MOREFLAGS='-Werror' make V=1 -C tests clean test-lz4c32 , lz4: ../lib/lz4hc.c:282: int LZ4HC_InsertAndGetWiderMatch(...), Assertion `matchPtr >= lowPrefixPtr' failed.
          { pkgs: 'clang-3.6',                                          cc: clang-3.6, cxx: clang++-3.6, stdc11: 'true',  stdc90: 'true',  x32: 'false',    os: ubuntu-16.04,  }, # clang-3.6 compiler clashes for x32, LDFLAGS='-Wl,--verbose' MOREFLAGS='-Werror' make V=1 -C tests clean test-lz4c32 , lz4: ../lib/lz4hc.c:282: int LZ4HC_InsertAndGetWiderMatch(...), Assertion `matchPtr >= lowPrefixPtr' failed.
          { pkgs: 'clang-3.5',                                          cc: clang-3.5, cxx: clang++-3.5, stdc11: 'true',  stdc90: 'true',  x32: 'false',    os: ubuntu-16.04,  }, # clang-3.5 compiler clashes for x32, LDFLAGS='-Wl,--verbose' MOREFLAGS='-Werror' make V=1 -C tests clean test-lz4c32 , lz4: ../lib/lz4hc.c:282: int LZ4HC_InsertAndGetWiderMatch(...), Assertion `matchPtr >= lowPrefixPtr' failed.
        ]

    runs-on: ${{ matrix.os }}
    env:                        # Set environment variables
      # We globally set CC and CXX to improve compatibility with .travis.yml
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    steps:
    - uses: actions/checkout@v2 # https://github.com/actions/checkout
    - name: apt-get remove
      if: ${{ matrix.pkgremove != '' }}
      run: |
        sudo apt-get remove ${{ matrix.pkgremove }}

    - name: apt-get install
      run: |
        sudo apt-get install gcc-multilib
        sudo apt-get install ${{ matrix.pkgs }}

    - name: Environment info
      run: |
        echo && which $CC
        echo && $CC --version
        echo && which $CXX
        echo && $CXX --version

####    - name: make
####      run: |
####        make V=1
####
####    - name: make all
####      run: |
####        make V=1 clean all
####
####    - name: make c_standards (C90)
####      if: ${{ matrix.stdc90 == 'true' }}
####      run: |
####        make V=1 clean c_standards_c90
####
####    - name: make c_standards (C11)
####      if: ${{ matrix.stdc11 == 'true' }}
####      run: |
####        make V=1 clean c_standards_c11
####
####    - name: make c-to-c++
####      run: |
####        make V=1 clean ctocpptest
####
####    - name: make cxxtest
####      run: |
####        make V=1 clean cxxtest
####
####    - name: make -C programs default
####      run: |
####        make V=1 -C programs clean default
####
####    - name: make -C programs default -D_FORTIFY_SOURCE=2
####      run: |
####        CFLAGS='-fPIC' LDFLAGS='-pie -fPIE -D_FORTIFY_SOURCE=2' make V=1 -C programs clean default
####
####    - name: make -C tests test-lz4
####      run: |
####        MOREFLAGS='-Werror' make V=1 -C tests clean test-lz4
####
####    - name: make clangtest (clang only)
####      if: ${{ startsWith( matrix.cc , 'clang' ) }}
####      run: |
####        make V=1 clean clangtest
####
    - name: make -C tests test MOREFLAGS='-mx32'
      if: ${{ matrix.x32 == 'true' }}
      run: |
        LDFLAGS='-Wl,--verbose' MOREFLAGS='-mx32' make V=1 -C tests clean test

    - name: make -C tests test MOREFLAGS='-mx32' || echo Ignore failure for now.
      if: ${{ matrix.x32 == 'may-fail' }}
      run: |
        LDFLAGS='-Wl,--verbose' MOREFLAGS='-mx32' make V=1 -C tests clean test || (echo Ignore FAIL for now. && $(exit 0))

    - name: make -C tests test-lz4c32
      run: |
        LDFLAGS='-Wl,--verbose' MOREFLAGS='-Werror' make V=1 -C tests clean test-lz4c32
