# Maintenance Schedule:
# - GitHub Actions : "Ubuntu 16.04 LTS will be removed on September 20, 2021"
#   https://github.blog/changelog/2021-04-29-github-actions-ubuntu-16-04-lts-virtual-environment-will-be-removed-on-september-20-2021/
#   This CI script will remove ubuntu-16.04.
#   It also removes test for the following compilers:
#   - gcc : 4.4, 4.6, 4.7
#   - clang: 3.5, 3.6, 3.7, 3.8
#
# Known issues:
# - For now, this CI script ignores exit code of `make usan`.  Because
#   there're several issues which may take relatively long time to
#   resolve.  We'll fully enable it when we ensure `make usan` is ready
#   for all commits and PRs.
#   See https://github.com/lz4/lz4/pull/983 for details.  Also you can
#   investigate its raw log in "Linux x64 usan" at the GitHub Actions.
#
# - This test script ignores exit code of cppcheck which can see under
#   Job:Linux x64 scan-build + cppcheck in the GitHub Actions report.
#   Because this project doesn't 100% follow their recommendation.
#   Also sometimes it reports false positives.
#
# Notes:
# - You can investigate various information at the right pane of GitHub
#   Actions report page.
#
#   | Item                      | Section in the right pane             |
#   | ------------------------- | ------------------------------------- |
#   | OS, VM                    | Set up job                            |
#   | git repo, commit hash     | Run actions/checkout@v2               |
#   | gcc, tools                | Environment info                      |
#
# - To fail earlier, order of tests in the same job are roughly sorted by
#   elapsed time.
#
# Tests which we still leave at travis-ci
# - name: (Trusty) gcc-4.4 compilation
# - name: (Xenial) gcc-5 compilation
# - name: (Trusty) clang-3.8 compilation
# - name: Compile OSS-Fuzz targets
# - name: tag build
# - name: aarch64 real-hw tests
# - name: PPC64LE real-hw tests
# - name: IBM s390x real-hw tests


# Name of the workflow is also displayed as a SVG badge
name: lz4 CI

on: [push, pull_request]

jobs:
  # CI Environment information
  #
  # - "ubuntu-latest" (Ubuntu 20.04) has the following software
  #   https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
  env-info:
    strategy:
      matrix:
        include: [
          { os: ubuntu-latest,  }, 
          { os: ubuntu-20.04,   }, # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md
          { os: ubuntu-18.04,   }, # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1804-README.md
          { os: ubuntu-16.04,   }, # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu1604-README.md
        ]

    name: Linux Virtual Env Info (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2

    - name: cc --version
      run: echo && cc --version

    - name: gcc --version
      run: echo && gcc --version

    - name: clang --version
      run: echo && clang --version

    - name: make -v
      run: echo && make -v

    - name: gcc packages (apt-cache)
      run: apt-cache search gcc | grep "^gcc-[0-9\.]* " | sort

    - name: clang packages (apt-cache)
      run: apt-cache search clang | grep "^clang-[0-9\.]* " | sort

    - name: QEMU packages (apt-cache)
      run: apt-cache search qemu | grep "^qemu-system-.*QEMU full system" | sort

    - name: git --version
      run: echo && git --version

    - name: g++ --version
      run: echo && g++ --version


  # Test various C compilers
  #
  # Invoke the following commands for each C compiler
  #   make all c_standards
  #   make -C programs
  #   make -C tests
  #
  ubuntu-basic-compatibility:
    strategy:
      fail-fast: false  # 'false' means Don't stop matrix workflows even if some matrix failed.
      matrix:
        include: [
          # You can access the following values via ${{ matrix.??? }}
          #   name : Label name.
          #   pkg  : apt-get package name.
          #   cc   : C compiler executable.
          #   cxx  : C++ compiler executable for `make ctocpptest`.
          #   os   : GitHub Actions YAML workflow label.  See https://github.com/actions/virtual-environments#available-environments
  
          # Default C compilers
          #  We use 'ubuntu-latest' for default C/C++ compilers.
          { name: 'cc',         pkg: '',                  cc: cc,        cxx: c++,          os: ubuntu-latest, },
          { name: 'gcc',        pkg: '',                  cc: gcc,       cxx: g++,          os: ubuntu-latest, },
          { name: 'clang',      pkg: '',                  cc: clang,     cxx: clang++,      os: ubuntu-latest, },

          # gcc
          { name: 'gcc 11',     pkg: 'gcc-11',            cc: gcc-11,    cxx: g++-11,       os: ubuntu-20.04,  },
          { name: 'gcc 10',     pkg: 'gcc-10',            cc: gcc-10,    cxx: g++-10,       os: ubuntu-20.04,  },
          { name: 'gcc 9',      pkg: 'gcc-9',             cc: gcc-9,     cxx: g++-9,        os: ubuntu-20.04,  },
          { name: 'gcc 8',      pkg: 'gcc-8 g++-8',       cc: gcc-8,     cxx: g++-8,        os: ubuntu-20.04,  },
          { name: 'gcc 7',      pkg: 'gcc-7 g++-7',       cc: gcc-7,     cxx: g++-7,        os: ubuntu-20.04,  },

          # gcc, ubuntu-18.04
          { name: 'gcc 6',      pkg: 'gcc-6 g++-6',       cc: gcc-6,     cxx: g++-6,        os: ubuntu-18.04,  },
          { name: 'gcc 5',      pkg: 'gcc-5 g++-5',       cc: gcc-5,     cxx: g++-5,        os: ubuntu-18.04,  },
          { name: 'gcc 4.8',    pkg: 'gcc-4.8 g++-4.8',   cc: gcc-4.8,   cxx: g++-4.8,      os: ubuntu-18.04,  },

          # gcc, ubuntu-16.04 will be removed.  See "Maintenance Schedule" at the top of this file.
          { name: 'gcc 4.7',    pkg: 'gcc-4.7 g++-4.7',   cc: gcc-4.7,   cxx: g++-4.7,      os: ubuntu-16.04,  },
          { name: 'gcc 4.6',    pkg: 'gcc-4.6 g++-4.6',   cc: gcc-4.6,   cxx: g++-4.6,      os: ubuntu-16.04,  },
          #{name: 'gcc 4.5',    pkg: 'gcc-4.5 g++-4.5',   cc: gcc-4.5,   cxx: g++-4.5,      os: ubuntu-16.04,  },  # Failed to install.  Dependent package is not installable.
          { name: 'gcc 4.4',    pkg: 'gcc-4.4 g++-4.4',   cc: gcc-4.4,   cxx: g++-4.4,      os: ubuntu-16.04,  },


          # clang
          { name: 'clang 12',   pkg: 'clang-12',          cc: clang-12,  cxx: clang++-12,   os: ubuntu-20.04,  },
          { name: 'clang 11',   pkg: 'clang-11',          cc: clang-11,  cxx: clang++-11,   os: ubuntu-20.04,  },
          { name: 'clang 10',   pkg: 'clang-10',          cc: clang-10,  cxx: clang++-10,   os: ubuntu-20.04,  },
          { name: 'clang 9',    pkg: 'clang-9',           cc: clang-9,   cxx: clang++-9,    os: ubuntu-20.04,  },
          { name: 'clang 8',    pkg: 'clang-8',           cc: clang-8,   cxx: clang++-8,    os: ubuntu-20.04,  },
          { name: 'clang 7',    pkg: 'clang-7',           cc: clang-7,   cxx: clang++-7,    os: ubuntu-20.04,  },
          { name: 'clang 6',    pkg: 'clang-6.0',         cc: clang-6.0, cxx: clang++-6.0,  os: ubuntu-20.04,  },

          # clang, ubuntu-18.04
          { name: 'clang 5',    pkg: 'clang-5.0',         cc: clang-5.0, cxx: clang++-5.0,  os: ubuntu-18.04,  },
          { name: 'clang 4',    pkg: 'clang-4.0',         cc: clang-4.0, cxx: clang++-4.0,  os: ubuntu-18.04,  },
          { name: 'clang 3.9',  pkg: 'clang-3.9',         cc: clang-3.9, cxx: clang++-3.9,  os: ubuntu-18.04,  },

          # clang, ubuntu-16.04 will be removed.  See "Maintenance Schedule" at the top of this file.
          { name: 'clang 3.8',  pkg: 'clang-3.8',         cc: clang-3.8, cxx: clang++-3.8,  os: ubuntu-16.04,  },
          { name: 'clang 3.7',  pkg: 'clang-3.7',         cc: clang-3.7, cxx: clang++-3.7,  os: ubuntu-16.04,  },
          { name: 'clang 3.6',  pkg: 'clang-3.6',         cc: clang-3.6, cxx: clang++-3.6,  os: ubuntu-16.04,  },
          { name: 'clang 3.5',  pkg: 'clang-3.5',         cc: clang-3.5, cxx: clang++-3.5,  os: ubuntu-16.04,  },
        ]

    name: ${{ matrix.name }}, ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:                        # Set environment variables
      # We globally set CC and CXX to improve compatibility with .travis.yml
      CC: ${{ matrix.cc }}
      CXX: ${{ matrix.cxx }}
    steps:
    - uses: actions/checkout@v2 # https://github.com/actions/checkout
    - name: apt-get install
      run: sudo apt-get install gcc-multilib ${{ matrix.pkg }}

    - name: Compiler information
      run: |
        echo && which $CC
        echo && $CC --version
        echo && which $CXX
        echo && $CXX --version

    - name: make
      run: make

####    - name: make clean
####      run: make clean
####
####    - name: make all
####      run: make clean all
####
####    - name: make c_standards
####      run: make clean c_standards
####
####    - name: make -C programs default
####      run: make -C programs clean default
####
####    - name: make -C programs default -D_FORTIFY_SOURCE=2
####      run: CFLAGS='-fPIC' LDFLAGS='-pie -fPIE -D_FORTIFY_SOURCE=2' make -C programs clean default
####
####    - name: make -C tests test-lz4
####      run: MOREFLAGS='-Werror' make -C tests clean test-lz4
####
####    - name: make -C tests test-lz4c32
####      run: MOREFLAGS='-Werror' make -C tests clean test-lz4c32
####
####    - name: make c-to-c++
####      run: make clean ctocpptest
